# -*- coding: utf-8 -*-
"""day11_functions_basics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1stF7MTrbXEg5NLqiSefUlU67Gjs6uVhC
"""

"""getting started with functions """

def greeting(name = "Harish"):
  print(f"Hello {name} ")

greeting() #with n parameter
greeting ("Pradeep")

#keyword parameter
def bio (name, age):
  print(f"{name} is {age} old")

bio("15", "Harish")
#above is a positional function
#i am going to use Keywords now
bio (age= 15, name ="Harish")

#Test default functional values when multiple parameters are involved

def bio2(Name, place, age = 45, ): #non default parameters are on the left
  print(f"{Name} is from {place} and he is {age} old ")

bio2("Harish", "Vuyyuru")

"""
#Now I will try multiple arguments with keyword matching
def bio3 (Name, age=45, place):
  print(f"{Name} is from {place} and he is {age} old ")

bio3(name= "Harish", place = "Vuyyuru", age = 45) #the porgram still fails owing

"""

###Return Values

def squares(num):
  return (num * num)
print (squares(5)) #prints 25
# lets try assignment
p = squares(25) #return values can be assigned to variables
print (p)
### Rule of the thumb: if you want to make an argument optional, make it the rightmost argument

##Write a function that  constructs a dictionary based on the parameters and returns the dictionary

person= {}
def make_dict(first_name, last_name):
  person.update({"first name" : first_name, "last_name":last_name})
  #person["first_name"] = first_name
  #person["last_name"] = last_name
  return person

p = make_dict("Harish", "Puvvula")
p = make_dict("Pradeep", "Puvvula")
print (p) #only retains the latest value
"""
#Alternative approach, pass dictionary as an argument

def update_dict(person, name, age):
  person= {}
  person[name] = age

update_dict(person, "Harish", 45)
update_dict(person, "Pradeep", 43)
print (person)

Will revisit the problem tomorrow"""