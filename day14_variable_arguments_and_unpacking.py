# -*- coding: utf-8 -*-
"""day14_variable_arguments_and_unpacking.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JpSXgGt2BsIC8Y7pwEUS1ETOrMPm2Thu
"""

"""unlimited parameters in function calls"""
def test_multiparam(*keepthemall):
  print(f"The list has these many parameters {len(keepthemall)}")
  if isinstance(keepthemall, list):
    for name in keepthemall:
      print(name)

test_multiparam(1,2,3) #passing numbers
my_list= [2,4,6,8]
test_multiparam(my_list)
#the above code fails because the multiparams are treated as tuples than lists
#Will create that validation below

def test_multiparam2(*keepthemall):
  print (type(keepthemall)) #checking the type of the unlimited parameter
  print(f"The list has these many parameters {len(keepthemall)}")
  for param in keepthemall: #I am unpacking the keepthemall using param as an iterator
    if isinstance(param, list): #if one of the parameter is a list then...
      for item in param:
        print(item)
    else:
      print(param)

test_multiparam2(1,2,3) #passing numbers
my_list= [2,4,6,8]
test_multiparam2(my_list)
test_multiparam2(1,2,3,my_list)

#want to verify the return value of the ublimited parameter
def test_multiparam3(*keepthemall):
  print (type(keepthemall)) #checking the type of the unlimited parameter
  print(f"The list has these many parameters {len(keepthemall)}")
  return keepthemall

my_test = test_multiparam3(1,2,3)
print(type(my_test))