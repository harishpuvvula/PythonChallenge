# -*- coding: utf-8 -*-
"""day22_class_composition_car_engine.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1We6h68kby8ti0eQSOXXZWBe6ygtWD72J
"""

"""Today I shall Test class composition"""

"""	Composition = “has a” relationship
(A Car has an Engine, has a GPS, etc.)
"""

class Engine:
  def __init__(self, horsepower, torque, capacity):
    self.horsepower = horsepower
    self.torque= torque
    #self.cc = cc
    self.status = "off"
    self.capacity = capacity
  def start(self):
    print("Engine Started")
    self.status = "on"
  def stop(self):
    print("Engine Stopped")
    self.status = "off"
class Car:
  def __init__(self, manufacturer, model, year,hp, torque,capacity):
    #include the composition class attributes towards the end of the parameter list
    self.manufacturer = manufacturer
    self.model = model
    self.year = year
    self.engine = Engine(hp, torque, capacity)
    self.current_fuel = 0
    #self.topoff = 0
  def car_start(self):
    if self.current_fuel<=0:
      print("Please refuel your car")
    else:
      self.engine.start()
  def car_stop(self):
    self.engine.stop()
  def refuel(self, amount):
    if amount <= 0:
        print("Refuel amount must be positive.")
        return self.current_fuel

    before = self.current_fuel
    # add then clamp to tank capacity
    self.current_fuel = min(self.engine.capacity, self.current_fuel + amount)

    print(f"Refueled +{amount}. Fuel: {before} -> {self.current_fuel}/{self.engine.capacity}")
    return self.current_fuel



my_car = Car("Suzuki", "Alto", 2012, hp=65, torque =90, capacity=35)
my_car.car_start()
my_car.refuel(20)
my_car.refuel(20)
#my_car.car_stop()