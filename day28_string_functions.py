# -*- coding: utf-8 -*-
"""day28_string_functions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pXOS9qbWoNeMH5xFMtsrt4cKn2ZkIyYq
"""

"""
Extensive testing on string functions which I think are very important

"""
#upper()
names = ['harish', 'pradeep']
print("hello".upper())
for name in names:
    print(name.upper())
print()

#replace(old, new, 1)
#replace action is not permananent
test_string = " I am a very good man. I am a student"
#replace a word
modified_text = test_string.replace("am", "ain't")
print(test_string)
print(modified_text)

#replace just the first occurence of the word
print(test_string.replace("am", "ain't", 1))

#is there a way to replace a second instance of the world and leaving other instance untouched

#replace option is case sensitive
print(test_string.replace("AM", "ain't")) #nothing happens

#replace individual charachters

print(test_string.replace("a", "C"))

#is there way to replace a specific instance

"""
############################################
split(delimiter)
splits the string into arrays
string is immutable
############################################
"""

split_string =  "I am good man; I am from Vuyyuru"
split_array = split_string.split() #default delmiter is " "
print(split_array)
print(split_string)

split_string2 = "I,am,very,good,boy"
split_array2 = split_string2.split(",")
print(split_array2)

"""
#######################################3
"seperator".join(list)

#######################################

"""
mystring3 = ["Harish", "is", "a", "good", "boy"]
print(" ".join(mystring3))
print("_".join(mystring3))
print("".join(mystring3))



"""
#######################
string.find(substring, start, end)
immutable

the function looks for the just first occurence of the substring
works for both words and charchters
#########################
"""

my_string4 = "Harish is a might good man; a man like is diificult to find"
print(my_string4.find("is")) #3
print(my_string4.find("i"))
print(my_string4.find("IS", 1, 20)) #case sensitive
print(my_string4.find("am")) #when the match is not found -1 is returned


"""
#################################

string.count("substring", start, end)
start = default is 1
end = default is len(string)
works for both words and charchters
################################
"""

my_string5 = "Harish is a mighty good man, good writer"
print(my_string5.count("good")) #2
print (my_string5.count(" ")) #counts spaces
print (my_string5.count("Is")) #case sensitive
print(my_string5.count("o"))


"""
#############################################



############################################


"""