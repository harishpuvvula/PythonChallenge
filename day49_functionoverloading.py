# -*- coding: utf-8 -*-
"""day49_functionoverloading.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nHj0_vLDv5mIc9j8_fDfqQbOpRsmys2K
"""

"""
 Weâ€™ll practice these ideas with this exercise. Write a function, firstlast, that takes
a sequence (string, list, or tuple) and returns the first and last elements of that
sequence, in a two-element sequence of the same type. So firstlast('abc') will
return the string ac, while firstlast([1,2,3,4]) will return the list [1,4]
"""

def firstlast(sequence):
  #print(f"{sequence[0]} {sequence[1]}")
  if isinstance(sequence,str):
    return sequence[0] + sequence[-1]
  if isinstance(sequence,list):
    return [sequence[0],sequence[-1]] #didn't know the types can also be influenced at the return function

  if isinstance(sequence,tuple):
    return (sequence[0],sequence[-1])


my_string = "Harish"
firstlast(my_string)
my_list = [1,2,3,4]
firstlast(my_list)
#my_tuple = (1,2,3,4)
#firstlast(my_tuple)